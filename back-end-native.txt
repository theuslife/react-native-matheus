======================= Axios, Async/Await e Requisições com React-Native ==============================

//Example 1: Get and Post
            import React from 'react';
            import { StyleSheet, Text, View , ScrollView, Button, TextInput} from 'react-native';
            import { ListItem } from 'react-native-elements';
            import Axios from 'axios';

            export default class App extends React.Component {

            constructor(props){
                    super(props);
                    this.state = {
                        list: [],
                        inputValue: ''
                    }

                    this.getItems();
                }


            getItems = async () => {
                const response = await Axios.get('https://b7web.com.br/todo/17824')
                this.setState({list: response.data.todo});
            }
            
            addItems = async () => {
                const response = await Axios.post('https://b7web.com.br/todo/17824', {
                    item: this.state.inputValue
                });
                console.log(response.data);
                this.getItems();
                this.setState({inputValue: ''});
            }

            deleteItems = async () => {

            }

            render() {

                    var data =  this.state.list.map((element, index) => 
                        <ListItem 
                            key={index}
                            title={element.item}
                            checkmark={true}
                            subtitle={element.id}
                        />
                    )

                    return (
                        <View style={styles.container}>

                        <View style={styles.topArea}>
                            <Text style={styles.txtTopArea}> Adicione uma nova tarefa :) </Text>
                            <TextInput 
                                style={styles.input} 
                                onChangeText={(value) => {this.setState({inputValue: value})}}
                                value={this.state.inputValue}  
                                />
                            <Button 
                                onPress={() => {this.addItems()}} 
                                title='Adicionar'>
                            </Button>
                        </View>

                        <ScrollView style={styles.list}>
                            {data}
                        </ScrollView>
                        </View>
                );
                }
            }


            const styles = StyleSheet.create({
            container: {
                flex: 1,
                marginTop: 20,

            },
            list: {
                flex: 1,
            },
            topArea: {
                marginTop: 20,
                height: 135,
                alignItems: 'center'
            },
            txtTopArea: {
                textAlign: 'center',
                fontSize: 16,
            },
            input: {
            height: 40,
            borderBottomWidth: 1,
            width: 200,
            borderRadius: 20,
            padding: 10
            }
            });

//Example 2: Get and Post


======================= Firebase - Databse ==============================

/*

O banco de dados do firebase e NoSQL

O Firebase e real time, logo ele somente atualiza quando uma informacao nova e jogada.

Em um banco relacional as coisas acontecem diferentes, o servidor fica requisitando a cada x segundos
para verificar se ha alguma nova.

Ele não é autoincrement, o suposto `id` é uma código gerado automaticamente

*/

Example 1:
            //Pegue do database o nó `nome` e fique escutando se há modificacões
            
            // Listener (ouvinte)
            // firebase.database().ref(`usuarios/1/nome` ).on(`value`, (snapshot) => {
            //     this.setState({name: snapshot.val()});
            // });

            // Carrega uma vez
            firebase.database().ref(`usuarios/1`).once(`value`).then((snapshot) => {
                this.setState({name: snapshot.val().nome, age: snapshot.val().idade});
                }
            );

Example: 2 - Inserindo novo usuario em um nó

insertUser(){
    if(this.state.name.length > 0){

        //Pegue o documento úsuarios
        let user = firebase.database().ref('usuarios');

        //Gere uma chave única
        let key = user.push().key;

        //Acessa os dados filho de um nó e configure com tais informações
        user.child(key).set({
            nome: this.state.name,
            idade: this.state.age
        });

        //

        alert('Usuario inserido')
        
    }

}

Example: 3 - Inserindo novo dado e Deletando

            //Para inserir um novo dado em um nó é necessário gerar uma nova chave
            let user = firebase.database();
            let key = user.push().key;

            //Atualizando dados
            firebase.database().ref('usuarios').child('2').set({
                idade: 22,
                nome: 'Jennifer'
            });

            //Deletando dados
                firebase.database().ref('usuarios').child('1').remove()

Example: 4 - Listagem
        //Pegando dados do usuario para listagem. O on deixa realtime, e o once sem realtime desta prop
        firebase.database().ref('usuarios').on('value', ( snapshot ) => {
                const { list } = this.state;

                //ChildItem vai ser um objeto contendo cada Key
                snapshot.forEach((childItem) => {
                list.push({
                    key: childItem.key,
                    nome: childItem.val().nome,
                    idade: childItem.val().idade
                })
                })
                this.setState({list: list});
        })

        let id = '-LSGb5BvMHlDPyCIDrB6'

        firebase.database().ref(`usuarios/${id}`).remove()

======================= Firebase - Auth ==============================

Example 1: Registrando

        register(){

            firebase.auth().createUserWithEmailAndPassword(
                this.state.email, 
                this.state.password
            ).catch((error) => {
                //error code
                //error message
                alert(error.message);
            });

        }

Example 2 : Logando
        login = () => {

            //Logando user
            firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)
            .catch((error) => {
            if(error.code == 'auth/wrong-password'){
                alert('senha errada');
            } else {
                alert('tente novamente mais tarde');
            }
            });
        }

Example 3: Deslogin

            deslogin = () => {
                firebase.auth().signOut();
            }

Example 4 : Verifica mudanças de auth e retorna dados das modificacões
    
        // Qualquer mudança em algum dado de autenticação os dados do usuário vem para aqui (Apos cadastrar o user loga automaticamente)
        firebase.auth().onAuthStateChanged((user) => {
                if(user){
                    //Logado
                    alert('Usuario logado');
                } else {
                    //Deslogado
                    alert('Você está deslogado');
                }
            });

======================= Firebase - Auth and Database together ==============================

Example 1 : Inserindo novo usuario registrado pelo auth

    //Função
        register = () => {
            firebase.auth().createUserWithEmailAndPassword(
            this.state.email, this.state.password
            ).catch((error) => {
            console.log(error.code);
            })
        }

    //No Constructor
        firebase.auth().onAuthStateChanged((user) => {
            if (user) {
                //Entao criamos um nó usuarios, onde recebe um hash id e configura o nome deste usuario
                firebase.database().ref('usuarios').child(user.uid).set({
                nome: this.state.name
                })
            } else {

            }
        })

Example 2 : Logando usuario e mostrando seus dados

        firebase.auth().onAuthStateChanged((user) => {
        if (user) {
            firebase.database().ref('usuarios').child(user.uid).once('value').then((snapshot) => {
            const name = snapshot.val().nome;
            alert(`Seja bem vindo ao nosso sistema ${name}! `);
            })
        } else {
            alert('Deslogado');
        }

        })