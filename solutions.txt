/*

Você pode impedir que a linha de um componente TEXT ultrapasse mais que um determinado valor
com a propriedade numberOfLines

*/


=======================Voltando para o inicio de uma navegação ==============================

//Example: 
    static navigationOptions = ({navigation}) => ({
        header: null
    });

    constructor(props){
        super(props);
        this.goBackScreen = this.goBackScreen.bind(this);
    }
  
    //Voltando para uma tela especifíca e resetando histórico
    goBackScreen(){
        this.props.navigation.popToTop();
    }

======================= Personalização do cabeçalho do Stack Navigation ==============================
const navigator = createStackNavigator({
  Screen1: {
    screen: Screen1
  },
  Screen2: {
    screen: Screen2
  }
}, {
  'headerMode': 'none'
})

======================= Puxando propriedades de um componente costumizado ==============================


export class TextInput extends React.Component {

    componentDidMount() {
        if (this.props.onRef != null) {
            this.props.onRef(this)
        }
    }
    
    onSubmitEditing() {
        this.props.onSubmitEditing();
    }
    
    focus() {
        this.textInput.focus()
    }
    
	render() {
		return (
			<Input
                {...this.props}
                inputContainerStyle={[styles.input, this.props.inputContainerStyle]}
                containerStyle={[styles.inputContainer, this.props.containerStyle]}
                ref={input => this.textInput = input}
                onSubmitEditing={this.onSubmitEditing.bind(this)}
            />
		);
	}
}


================================Selecionando Checkbox em lists individualmente=====================================

//Example
        import React, { Component } from 'react';
        import { Text, View, StyleSheet, FlatList } from 'react-native';
        import { Constants } from 'expo';

        // or any pure javascript modules available in npm
        import { CheckBox } from 'react-native-elements';

        const items = ['chicken', 'rice', 'patties'];

        export default class App extends Component {
        state = {
            checked: [],
        };

        checkItem = item => {
            const { checked } = this.state;

            if (!checked.includes(item)) {
            this.setState({ checked: [...checked, item] });
            } else {
            this.setState({ checked: checked.filter(a => a !== item) });
            }
            
        };

        render() {
            return (
            <View style={styles.container}>
                <FlatList
                data={items}
                extraData={this.state}
                renderItem={({ item }) => (
                    <CheckBox
                    title={item}
                    onPress={() => this.checkItem(item)}
                    checked={this.state.checked.includes(item)}
                    />
                )}
                />
            </View>
            );
        }
        }

        const styles = StyleSheet.create({
        container: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            paddingTop: Constants.statusBarHeight,
            backgroundColor: '#ecf0f1',
        },
        });
