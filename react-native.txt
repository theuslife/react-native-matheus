=======================Estrutura básica==============================

//Example 1 - Estrutura Base de um componente react
    import React, { Component } from 'react';
    import { View, Text } from 'react-native';

    //View
    export default class app extends Component {
    //Dentro de todo componente temos um método render que retorna valores
    render() {
        const nome = 'Matheus'

        //Return é uma função
        return(
        <View style={style.container}>
            <Text style={style.txt}>Meu nome é: {nome} </Text>
        </View>
        );
    };
    }

    //Style
    const style = {
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center'
    },
    txt: {
        fontSize: 38
    }
    }

//Example 2 - Chamando métodos e funções no JSX:
    //Class View
    export default class app extends Component {
    
    //Método somar
    static somar(n1, n2){
        return n1 + n2;
    }
    
    render() {
        
        const nome = 'Matheus Rodrigues';
        const somar = (n1, n2) => 
        {
        return n1 + n2;
        }

        //Chamamos o método estático da nossa classe
        return(
        <View style={stylesheet.container}>
            <Text style={stylesheet.txt}>A soma entre 2 + 2 é {app.somar(2,2)} </Text>
        </View>
        );

    };
    }


=======================PROPS (Propriedades)==============================
//Example 1
  render() 
  {
    //Props são as propiedades dos nosso componentes de view JSX
    //Por exemplo o Style sendo utilizado abaixo é uma PROP (Propriedade)
    return(
      <View style={stylesheet.container}>
        <Text style={{fontSize: 25, color: 'blue'}}>Olá Matheus</Text>
      </View>
      );
    };
  }

//Example 2 - Image
    import React, { Component } from 'react';
    import { View, Text, Image, Button } from 'react-native';

    export default class app extends Component {
    render() 
    {
        return(
        <View style={styleSheet.container}>
            <Text style={{fontSize: 25, color: 'gray', margin:20}}>Sasuke Uchiha</Text>
            <Image source={src.srcImg} style={styleSheet.img}/>
            <Button title='Clicke aqui para conversar com Sasuke' color='red' onPress={()=>alert('Olá, meu nome é Sasuke Uchiha, sou da aldeia da folha. Prazer em conhece-lo, Matheus!')}></Button>
        </View>
        );
        };
    }

    //Source
    const src = {
    srcImg: {
        uri: 'https://i.pinimg.com/564x/50/95/d7/5095d7fc7b7893183493762802b3f601.jpg'
    },
    }

    //Style
    const styleSheet = {
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'black'
    },
    txt: {
        fontSize: 30,
    },
    button: {
        marginTop: 20,
        borderRadius: 20,
        backgroundColor: 'red'
    },
    img: {
        width: 300,
        height: 300,
        borderRadius: 50,
        marginBottom: 20
    }
    }

//Example 3 - Criando componentes e inserindo Propriedades
    import React, { Component } from 'react';
    import { View, Text, Image } from 'react-native';

    class SasukeImg extends Component{
    render()
    {

        const img = {
        src: {
            uri: 'https://i.pinimg.com/564x/50/95/d7/5095d7fc7b7893183493762802b3f601.jpg'
        },
        //O this.props.NOME_DA_PROPRIEDADE cria uma nova propriedade para o nosso componente, ou seja, a nossa classe SasukeImg 
        style: {
            width: parseInt(this.props.width),
            height: parseInt(this.props.height),
        }
        }

        return(
        <Image source={img.src} style={img.style}/>
        );

    }
    }

    //Componente principal
    export default class app extends Component {
    render() 
    {
        //Criamos o component SasukeImg
        return(
        <View style={styleSheet.container}>
            <Text style={styleSheet.txt}>Sasuke Uchiha</Text>
            <SasukeImg width='380' height='300' />
        </View>
        );

    };
    }

    //Style
    const styleSheet = {
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'black'
    },
    txt: {
        fontSize: 30,
        color: 'white'
    },
    }

=======================States (Estado)==============================

//Example 1 - States dinâmicos
    import React, { Component } from 'react';
    import { View, Text } from 'react-native';

    //Component
    class Janta extends Component {
    
    //State é definido no constructor (Algo variável e não estático)
    constructor(props){

        super(props);

        this.state = {
        comida: '',
        message: () =>{
            alert('Função do state executada!');
        }
        }

        let comidas = ['Pizza', 'Lasanha', 'Burger', 'Sopa', 'Arroz'];

        setInterval(() => {
        //Modificando um state com o setState
        this.setState((previousState) => {
            let randomNumber = Math.floor(Math.random() * comidas.length);
            return { comida: comidas[randomNumber] }
        })

        }, 1000);

    }

    render() {

        //Style
        const style = {
        text: {
            textAlign: 'center',
            paddingTop: 30,
            fontSize: 20,
            color: 'red'
        },
        textFood: {
            textAlign: 'center',
            fontSize: 18,
        }

        }

        //View
        return(
        <View>
            <Text style={ style.text }>Hoje você vai jantar: </Text>
            <Text style={ style.textFood }>{ this.state.comida }</Text>
        </View>
        );
        
    }
    }

    //App
    export default class app extends Component {
    render() 
    {
        return(
        <View>
            <Janta/>
        </View>
        );
    };
}

=======================Styles==============================

//Example 1:
    import React, { Component } from 'react';
    import { View, Text, StyleSheet } from 'react-native';

    export default class app extends Component {
    render(){
        //Adicionando mais de um estilo (Terceiro Text). Um vai sobrescrever o outro caso tenha modificações nas mesmas propriedades
        return(
        <View style={{paddingTop: 50}}>
            <Text style={styles.bigBlue}>Blue!</Text>
            <Text style={styles.red}>Red!</Text>
            <Text style={[styles.bigBlue, styles.red]}>Big red and in the center!</Text>
        </View>
        );
    }
    }

    const styles = StyleSheet.create({
    bigBlue: {
        color: '#0000FF',
        fontSize: 30,
        textAlign: 'center'
    },
    red: {
        color: '#FF0000',
    }

    });

//Example 2: Flebox column
    import React, { Component } from 'react';
    import { View, Text } from 'react-native';

    export default class app extends Component {
    render(){
        //Flexbox (Fléxivel)
        return(
        <View style={{flex: 1, backgroundColor: 'black'}}>
            <View style={{height: 70, backgroundColor: 'white'}}></View>
            <View style={{flex: 1, backgroundColor: 'blue'}}></View>
            <View style={{height: 70, backgroundColor: 'black'}}></View>
        </View>
        );
    }
    }

//Example 3: Flexbox e alinhamento de itens

    /*

    O justifyContent alinhará os itens de acordo com o FlexDirection
    (Coluna ou linha). Enquanto o alignItems irá alinhar os itens na 
    direção contrária, ou seja se o flexDirection for 'Row' o alignItens
    irá mover o conteúdo no sentido da coluna.

    JustifyContent has 'flex-start', 'center','flex-end', 'space-between' and 'space-around'

    alignitems has 'flex-start', 'center' and 'flex-end'

    */

    import React, { Component } from 'react';
    import { View, Text } from 'react-native';

    export default class app extends Component {
    render(){
            return(
            <View style={{flex: 1, flexDirection: 'row', justifyContent: 'center', alignItems: 'center', backgroundColor: 'black'}}>
                <View style={{width:400, height: 400, backgroundColor:'purple', flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>
                <View style={{width: 200, height: 200, backgroundColor: 'black', flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>
                    <Text style={{color: 'purple', fontSize: 18}}>xTheus</Text>
                </View>
                </View>
            </View>
            );
        }
    }

=======================Eventos==============================

//Example 1: Argumentos de Eventos
    import React, { Component } from 'react';
    import { View, Text, TextInput, StyleSheet } from 'react-native';

    export default class app extends Component {
    
    //State
    constructor(props)
    {
        super(props);
        this.state = {name: ''}
        
        //Bind irá fazer com que nossos métodos enxeguem o state e as props
        this.changeName = this.changeName.bind(this);
    }
    
    //Method
    changeName(name)
    {
        const state = this.state;

        (name.length > 0)? state.name = `Olá: ${name}`:state.name = '';

        this.setState(state);
    }

    //View
    render(){
        return(
        <View style={styles.centerView}>
            <TextInput style={styles.input} underlineColorAndroid='transparent' placeholder='Digite seu nome' onChangeText={this.changeName}></TextInput>
            <Text style={styles.txt}>{this.state.name}</Text>
        </View>
        );
    }

    }

    //Style
    const styles = StyleSheet.create({

    centerView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center'
    },

    txt: {
        fontSize: 24
    },

    input: {
        height:60,
        borderRadius: 10,
        backgroundColor: 'gray',
        width: 350,
        padding: 10,
        marginBottom: 10
    }

    });

//Example 2:
    import React, { Component } from 'react';
    import { View, Alert, Button, StyleSheet } from 'react-native';

    export default class app extends Component {

    constructor(props){
        super(props);
        this.state = {
        apertouBotao: () => {
            Alert.alert('Você apertou o botão')
        }  
        }
    }

    //View
    render(){
        return(
        <View style={styles.centerView}>
            <Button title='Aperte em mim' onPress={this.state.apertouBotao}></Button>
        </View>
        );
    }

    }

    //Style
    const styles = StyleSheet.create({

    centerView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center'
    },

    txt: {
        fontSize: 24
    },


    });

//Example 3:
    import React, { Component } from 'react';
    import { View, Button, StyleSheet, TextInput, Text } from 'react-native';

    export default class app extends Component {

    constructor(props){
        super(props);
        this.state = {
            name: '',
            temporaryName: ''
        }

        //Método foi referenciado
        this.changeName = this.changeName.bind(this);
        this.putName = this.putName.bind(this);

    }

    changeName(name){
        const state = this.state;
        console.log(state);
        (name.length > 0)? state.temporaryName = name:state.temporaryName = 'Digite algo no campo de inserir nome';   
        this.setState(state);
    }

    putName()
    {
        const state = this.state;
        state.name = state.temporaryName;
        this.setState(state);
    }

    //View
    render(){
        return(
        <View style={styles.centerView}>
            <Text style={styles.txt}>{this.state.name}</Text>
            <TextInput style={styles.input} placeholder='Digite seu nome' onChangeText={(this.changeName)}></TextInput>
            <Button title='Mensagem de boas vindas' onPress={this.putName}></Button>
        </View>
        );
    }

    }

    //Style
    const styles = StyleSheet.create({

    centerView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#403A39',
    },

    txt: {
        fontSize: 16,
        color: 'white',
    },

    input: {
    height:40,
    borderRadius: 10,
    backgroundColor: 'white',
    width: 350,
    padding: 10,
    marginBottom: 10,
    marginTop: 10
    }

    });

=======================Componente de botão personalizado==============================

//Example 1:
        class Botao extends Component {

        constructor(props){
            super(props);
            this.state = {};
            this.css = StyleSheet.create({
            botao: {
                width: 250,
                height: 50,
                borderWidth: 2,
                borderRadius: 25,
                borderColor: '#87CEEB',
                backgroundColor: 'transparent'
            },
            botaoArea: {
                flex: 1,
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center'
            },
            botaoTxt: {
                fontWeight: 'bold',
                fontSize: 16,
                color: '#87CEEB'
            }
            });
        }

        render(){
            return(
            <TouchableOpacity onPress={() => {alert('Eu falei :)')}} style={this.css.botao}>
                <View style={this.css.botaoArea}>
                <Text style={this.css.botaoTxt}> Eu sou um botão sabia: :o</Text>
                </View>
            </TouchableOpacity>
            );
        }

        }
=======================Scroll View==============================

//Example 1:
        import React from 'react';
        import { StyleSheet, Text, View, ScrollView } from 'react-native';

        export default class App extends React.Component {
        render() {
            //ScrollView vai permitir o deslize de dedo para ver mais elementos em tela
            //Este tipo de Scroll carrega tudo que estiver contido nele, portanto não é bom usa-lo quando o carregamento são grandes cargas de dados
            return (
            <View style={styles.container}>
                <ScrollView>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                </ScrollView>
            </View>
            );
        }
        }

        const styles = StyleSheet.create({
        container: {
            paddingTop: 20
        },
        firstSquare: {
            flex: 1,
            backgroundColor: 'black',
            height: 200,
        },
        secondSquare: {
            flex: 1,
            height: 200,
            backgroundColor: 'gray'
        }
        });

//Example 2:
        export default class App extends React.Component {
        render() {
            //Somente os elementos dentro do escopo do ScrollView terá a interação deste componente
            return (
            <View style={styles.container}>
                <View style={styles.header}>
                    <Text style={{color: 'white', textAlign: 'center'}}>Olá mundo</Text>
                </View>

                <ScrollView>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                    <View style={styles.firstSquare}></View>
                    <View style={styles.secondSquare}></View>
                </ScrollView>
            </View>
            );
        }
        }
=======================Flast list==============================

//Flast List carrega somente os itens que estão em tela e não todos os dados.
//Conforme vai rolando o Flast list atualiza os novos dados em tempo real

//Example 1: 

    import React from 'react';
    import { StyleSheet, Text, View, FlatList } from 'react-native';

    export default class App extends React.Component {
    
    constructor(props){
        super(props);
        this.state = {
        flatData: [
            {key: '1', nome: 'Matheus Rodrigues', idade: '20'},
            {key: '2', nome: 'Lorivaldo Pires', idade: '48'},
            {key: '3', nome: 'Maria Valeria', idade: '38'},
            {key: '4', nome: 'Thalia Rodrigues', idade: '8'},
            {key: '5', nome: 'Maria do Carmo', idade: '68'}
        ]
        }
    }

    //O que irá renderizar o nosso FlatList
    flatRender(item){
        return(
            <Text style={styles.txt}>{item.nome}, {item.idade} anos</Text>
        );
    }

    render() {
        //Flat list absorve os dados e diz através da propriedade o que irá executar
        return (
        <View style={styles.body}>
            <FlatList data={this.state.flatData}  renderItem={({item}) => {return this.flatRender(item)} } />
        </View>
        );
    }
    }

    const styles = StyleSheet.create({
    body: {
        flex: 1,
        paddingTop: 20
    },
    txt: {
        fontSize: 18,
        padding: 10
    }
    });

=======================SectionList==============================

/*

    SectionList são um FlatList com uma especialização a mais
    É como a lista de contatos no celular. Temos lista de nomes somente com A,B,C,D etc...
    O sectionList permite esta funcionalidade de separação de cada item renderizado em tela

*/


//Example 1:
        import React from 'react';
        import { StyleSheet, Text, View, SectionList} from 'react-native';

        export default class App extends React.Component {
        
        constructor(props){
            super(props);
            this.state = {
            listData: [
                {title: 'A', data: [
                {key: '1', nome: 'Alicia', idade: 8},
                {key: '2', nome: 'Amanda', idade: 23},
                {key: '3', nome: 'Alisson', idade: 17}
                ]},
                {title: 'B', data: [
                {key: '4', nome: 'Barbara', idade: 4},
                {key: '5', nome: 'Belamina', idade: 30},
                {key: '6', nome: 'Bruna', idade: 17}
                ]},
                {title: 'C', data: [
                {key: '7', nome: 'Carolina', idade: 16},
                {key: '8', nome: 'Carol', idade: 45},
                {key: '9', nome: 'Carina', idade: 19}
                ]},
                {title: 'D', data: [
                {key: '10', nome: 'Dante', idade: 8},
                {key: '11', nome: 'Daniel', idade: 23},
                {key: '12', nome: 'Dervesson', idade: 17}
                ]},
                {title: 'E', data: [
                {key: '13', nome: 'Escanor', idade: 42},
                {key: '14', nome: 'Eric', idade: 26},
                {key: '15', nome: 'Ecko', idade: 15}
                ]},
                {title: 'M', data: [
                {key: '16', nome: 'Matheus', idade: 20},
                {key: '17', nome: 'Maria', idade: 19},
                {key: '18', nome: 'Merlin', idade: 300}
                ]},
            ]
            }
        }

        listRender(item){
            return(
            <Text style={styles.listItem}>{item.nome}, {item.idade} anos</Text>
            );
        }

        listSectionRender(item){
            return(
            <Text style={styles.listHeader}>{item.title}</Text>
            );
        }

        render() {
            //Flat list absorve os dados e diz através da propriedade o que irá executar
            return (
            <View style={styles.body}>
                <SectionList sections={this.state.listData} renderItem={({item}) => {return this.listRender(item)}} renderSectionHeader={({section}) => {return this.listSectionRender(section)}} ></SectionList>
            </View>
            );
        }
        }

        const styles = StyleSheet.create({
        body: {
            flex: 1,
            paddingTop: 20
        },
        listItem: {
            padding: 10,
            fontSize: 15
        },
        listHeader: {
            backgroundColor: '#E0E0E0',
            padding: 10,
            fontSize: 18
        }
        });

=======================Picker==============================


 /*
 
    Picker no Android é como um dropbown, no qual selecionamos um item

 */

 //Example 1:
        import React, { Component } from 'react';
        import { StyleSheet, Text, View, Picker } from 'react-native';

        export default class App extends Component {

        constructor(props){
            super(props);
            this.state = {
            //Zero, pois o nosso array começa neste indice
            servico: 0,
            //Nosso array de objetos
            servicos: [
                {nome: 'Alinhamento', valor: 30},
                {nome: 'Balanceamento', valor: 20},
                {nome: 'Rodizio de Pneus', valor: 50},
                {nome: 'Test drive', valor: 10},
            ]
            }
        }

        render() {

            //Variável que recebe o nosso state de serviços e retorna um Picker selecionado
            let servicosItems = this.state.servicos.map((element, index) => {
                return (<Picker.Item key = {index} value={index} label={element.nome} />)
            })

            //Picker no Android é como um dropbown, no qual selecionamos um item
            return (
            <View style={styles.body}>

                <Text style={ styles.logo } >Autopeças Matheus</Text> 

                <Picker selectedValue={ this.state.servico } onValueChange={  (itemValue, itemIndex) => this.setState({servico: itemValue})  }>
                        {servicosItems}
                </Picker>

                <Text style={styles.txt}>R${this.state.servicos[this.state.servico].valor}</Text>

            </View>
            );
        }
        }

        const styles = StyleSheet.create({
        body: {
            flex: 1,
            paddingTop: 20,
            backgroundColor: '#E0E0E0'
        },
        logo: {
            fontSize: 30,
            textAlign: 'center'
        },
        txt: {
            textAlign: 'center',
            fontSize: 30,
            marginTop: 20
        }
        });

=======================Switch==============================

/*


*/


//Example 1:
